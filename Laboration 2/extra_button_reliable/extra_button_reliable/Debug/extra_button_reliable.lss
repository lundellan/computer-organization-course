
extra_button_reliable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000928  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000841  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000304  00000000  00000000  00001371  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008e  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001bd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	29 d0       	rcall	.+82     	; 0xec <main>
  9a:	35 c0       	rjmp	.+106    	; 0x106 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <init_leds>:
#include <util/delay.h>

uint8_t* init_leds()
{
	// Sets data direction to out for all leds
	DDRB |= 0b11111111;
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	84 b9       	out	0x04, r24	; 4
}
  a4:	08 95       	ret

000000a6 <init_buttons>:

uint8_t* init_buttons()
{
	// Sets data direction to in for the extra button
	DDRD |= 0<<DDRD7;
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8a b9       	out	0x0a, r24	; 10
}
  aa:	08 95       	ret

000000ac <button_read_reliably>:

uint8_t button_read_reliably()	
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	1f 92       	push	r1
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t button_state = (PIND & 1<<PIND7)>>PIND7;
  b6:	89 b1       	in	r24, 0x09	; 9
  b8:	88 1f       	adc	r24, r24
  ba:	88 27       	eor	r24, r24
  bc:	88 1f       	adc	r24, r24
  be:	89 83       	std	Y+1, r24	; 0x01
	
	if (button_state & 1)	
  c0:	99 81       	ldd	r25, Y+1	; 0x01
  c2:	89 2f       	mov	r24, r25
  c4:	81 70       	andi	r24, 0x01	; 1
  c6:	90 ff       	sbrs	r25, 0
  c8:	0d c0       	rjmp	.+26     	; 0xe4 <button_read_reliably+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	85 ea       	ldi	r24, 0xA5	; 165
  cc:	9e e0       	ldi	r25, 0x0E	; 14
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <button_read_reliably+0x22>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <button_read_reliably+0x28>
  d4:	00 00       	nop
	{
		_delay_ms(15);
		
		button_state = (PIND & 1<<PIND7)>>PIND7;
  d6:	89 b1       	in	r24, 0x09	; 9
  d8:	88 1f       	adc	r24, r24
  da:	88 27       	eor	r24, r24
  dc:	88 1f       	adc	r24, r24
  de:	89 83       	std	Y+1, r24	; 0x01
		
		if (button_state & 1) return 1;
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	81 70       	andi	r24, 0x01	; 1
	}
	
	return 0;
}
  e4:	0f 90       	pop	r0
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <main>:

int main(void)
{
	init_leds();
  ec:	d8 df       	rcall	.-80     	; 0x9e <init_leds>
	init_buttons();
  ee:	db df       	rcall	.-74     	; 0xa6 <init_buttons>
	
	while (1)
	{
		if (button_read_reliably())	{
			PORTB ^= 1;
  f0:	c1 e0       	ldi	r28, 0x01	; 1
	init_leds();
	init_buttons();
	
	while (1)
	{
		if (button_read_reliably())	{
  f2:	dc df       	rcall	.-72     	; 0xac <button_read_reliably>
  f4:	88 23       	and	r24, r24
  f6:	e9 f3       	breq	.-6      	; 0xf2 <main+0x6>
  f8:	85 b1       	in	r24, 0x05	; 5
			PORTB ^= 1;
  fa:	8c 27       	eor	r24, r28
  fc:	85 b9       	out	0x05, r24	; 5
			
			while (button_read_reliably());
  fe:	d6 df       	rcall	.-84     	; 0xac <button_read_reliably>
 100:	81 11       	cpse	r24, r1
 102:	fd cf       	rjmp	.-6      	; 0xfe <main+0x12>
 104:	f6 cf       	rjmp	.-20     	; 0xf2 <main+0x6>

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
